["It has been a long day."
 #delay/ms 1000 "The last thing you remember is falling asleep"
 #delay/ms 1000 "...at the REPL."
 #delay/ms 2000
 nil
 "This is the number 1:"
 [:div {:class "number"} 1]
 #delay/ms 1000 "It is also an expression."
 #delay/ms 1000 nil "Try evaluating it, by pressing the button or the enter key."
 #anchor/name "number"
 #game/expression {:expression 1, :target #{1}}
 "Nothing happened."

 #delay/ms 1000
 nil
 "Like many other values,"
 "when a number is evaluated as an expression,"
 "the result is the same value."

 #delay/ms 2000 nil "This is a symbol, try evaluating it too:"
 #anchor/name "symbol"
 #game/expression {:expression pi, :target #{3.14}}
 "The result is the number 3.14."
 #delay/ms 1000 nil "Evaluating a symbol yields the value that it names."

 #delay/ms 1000
 nil
 "This is a list, a series of values between parentheses."
 "Try evaluating it as well."
 #anchor/name "list"
 #game/expression {:expression (+ 1 2), :target #{3}}
 "When a list is evaluated, the first value in the list"
 "is applied, as a function, to the rest of the values in the list,"
 "as arguments."
 #delay/ms 2500
 nil
 "The expression (+ 1 2) applies the addition function to"
 "1 and 2, and returns their sum, which is 3."
 "It may be read as \"add 1 and 2\"."

 #delay/ms 2500
 nil
 "The arguments are NOT evaluated, if an argument is a list,"
 "it will be used as a list, if it is a symbol, it will be used as a symbol."

 #delay/ms 2000
 nil
 "Lists can, of course, contain other lists,"
 "but you have to choose the evaluation order carefully."

 #delay/ms 2000
 nil
 "Navigate to inner expressions with the arrow keys or buttons."
 "There's an undo button if you make a mistake."
 #anchor/name "nested-list"
 #game/expression {:expression (+ 1 2 (* 3 4)), :target #{15}}

 nil
 "The if function can be used to select a value based on a condition."
 "Try these examples:"
 #anchor/name "if-1"
 #game/expression {:expression (if true then else), :target #{then}}
 #game/expression {:expression (if false then else), :target #{else}}
 "With no else expression, it's taken to be nil."
 #game/expression {:expression (if false then), :target #{nil}}
 nil
 "Then there is =, the comparison function."
 #game/expression {:expression ((= 1 0) (= 0 0)), :target #{(false true)}}
 "Different types cannot compare equal:"
 #game/expression {:expression ((= a 0) (= b (1 2 3))), :target #{(false false)}}
 nil
 "Now see if you can use this to compute"
 "The Answer to the Ultimate Question of Life,"
 "the Universe, and Everything: 42."
 #anchor/name "if-2"
 #game/expression {:expression
                   (if (= answer answer) (* 6 9) (* 7 6))
                   :target #{42}}
 nil
 "A fn expression creates a function, which can be applied to arguments."
 "The first argument is the argument list, the next is the function body."
 #anchor/name "fn-1"
 #game/expression {:expression
                   ((fn (x) (* x x)) 5)
                   :target #{25}}
 "Applying it to 5 substitutes the value in for x."
 nil
 "Here's another example, try to evaluate this to pi:"
 #anchor/name "fn-2"
 #game/expression {:expression
                   ((fn (pi) (- pi pi)) 0)
                   :target #{3.14}}

 nil
 "That's all for now. More coming soon!"]
